#define STANDALONE_DIFF
#ifdef STANDALONE_DIFF
mainmodule Diffusion {
#else
module Diffusion {
#endif

#ifdef STANDALONE_DIFF
  readonly CProxy_Main mainProxy;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void done();
  };
#endif

  array [2D] Diffusion {
    entry Diffusion(int nx, int ny);
    entry [reductiontarget] void startDiffusion();
    entry [reductiontarget] void MaxLoad(double val);
    entry [reductiontarget] void AvgLoad(double val);
    entry [reductiontarget] void findNBors(int do_again);
    entry void setNeighbors(std::vector<int> neighbors, double load);
    entry void proposeNbor(int nborId);
    entry void okayNbor(int agree, int nborId);
    entry void AtSync(void);
    entry void ReceiveLoadInfo(int itr, double load, int node);
    entry void PseudoLoad(int itr, double load, int node); 
    
    entry void iterate() {
      //TODO: Currently fixed iterations
      for(itr = 0; itr < ITERATIONS; itr++) {
        // Send its load
        serial "Send loadInfo" {
          for(int i = 0; i < neighborCount; i++)
            thisProxy(floor(sendToNeighbors[i]/NY), sendToNeighbors[i]%NY).ReceiveLoadInfo(itr, my_load, getNodeId(thisIndex.x, thisIndex.y,NY));
        }
           
          // Wait for all its neighbors load
        for(temp_itr = 0; temp_itr < neighborCount; temp_itr++) {
          when ReceiveLoadInfo[itr](int itr, double load, int node) serial
          {
            int pos = findNborIdx(node);
            if(pos == -1) {
              DEBUGL(("\n[1]Error in pos -1 for node id %d", node));
            } else
              loadNeighbors[pos] = load;
          }
        }

        // Calculate average and do pseudo load balancing
        serial "Pseudo LB" {
          avgLoadNeighbor = average();
          DEBUGL(("[PE-%d] Received all loads of node, avg is %f and my_load %f \n", CkMyPe(), avgLoadNeighbor, my_load));
          PseudoLoadBalancing();
        }

        for(temp_itr = 0; temp_itr < neighborCount; temp_itr++) {
          when PseudoLoad[itr](int itr, double load, int node) serial {
            my_load += load;
            if(itr == ITERATIONS-1)
            DEBUGL(("\nMy load after diffusion %lf", my_load));
            int pos = findNborIdx(node);
            if(pos == -1) {
              DEBUGL(("\n[2]Error in pos -1 for nodeid %d", node));
            } else
              toReceiveLoad[pos] += load;
          }
        }
          
      }

      // Calculate the aggregate load that has to be sent.
      serial {
        CkCallback cbm(CkReductionTarget(Diffusion, MaxLoad), thisProxy(0,0));
        contribute(sizeof(double), &my_load, CkReduction::max_double, cbm);
        CkCallback cba(CkReductionTarget(Diffusion, AvgLoad), thisProxy(0,0));
        contribute(sizeof(double), &my_load, CkReduction::sum_double, cba);
        AggregateToSend();
      }
    }
  };
};

